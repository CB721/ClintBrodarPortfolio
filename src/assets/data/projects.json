[
    {
        "name": "G-List",
        "teamSize": 1,
        "technologies": [
            "React.js",
            "Node.js",
            "MySQL",
            "JavaScript",
            "HTML/SCSS",
            "SASS",
            "Express.js",
            "React Beautiful DND",
            "Shards React",
            "Axios.js",
            "Moment.js",
            "Validator",
            "React-reveal",
            "React-toastify",
            "Glamor CSS",
            "Mongoose/MongoDB",
            "Nodemailer",
            "CORS",
            "Bcrypt"
        ],
        "publishedDate": "Mar 2020",
        "mainImage": "https://github.com/CB721/grocery-list-front/blob/master/assets/wireframes:mockups/g-list-profile.png?raw=true",
        "secondaryImage": "https://github.com/CB721/grocery-list-front/blob/master/assets/wireframes:mockups/ERD.png?raw=true",
        "tertiaryImage": "https://github.com/CB721/grocery-list-front/blob/master/assets/wireframes:mockups/g-list-dark-mode.png?raw=true",
        "description": "An application for users to create custom grocery lists based on the stores where they shop.",
        "mainDetails": "The user can search for stores based on their location or enter a custom store, create lists and add items to it, and mark items as purchased. The user can also share lists with friends and family that they connect with.",
        "secondaryDetails": "Most of the tables in the database relate to at least one other table if not multiple.  In order to get the best performance, I used SQL to accomplish this.  The entire application is build around the user: when they joined or if they are using the dark mode feature, which other users they are connected with, which lists they have created.  Return the data needed, required a series of complex queries.  I used SQL procedures for two reasons: to improve on the speed of each complex query as well as to remove excess clutter from the back end code.",
        "tertiaryDetails": "Since the main purpose of this application is use it on a phone and mark items as complete as you shop, I gave the user to save the application to their home screen as a Progressive Web Application.  Also, the user can still add, update and delete items while their device is offline using Indexed DB.",
        "responsibilities": [
            "Creating the the inital wireframes and mockups",
            "Setting up the API routing and writing custom SQL queries",
            "Setting up user authentication including session cookies",
            "UI/UX design",
            "Converting the application to a PWA for better mobile performance"
        ],
        "userStories": [
            "As a user, I want to create grocery lists and specify where I'll buy and how urgently I need each item.",
            "As a user, I want to filter by store when I go shopping.",
            "As a user, I want to connect with friends and family members to send and receive grocery lists."
        ],
        "challenge": "My main challenge in this project was creating a dark mode for the user.  I was defining all of the colors for the app all on file and importing that file everywhere else to access them.  Logically, I figured that instead of creating duplicate versions of the CSS, I assumed I could change the colors in one place and it would subsequently update everywhere else.  After multiple experimentations, I was able to figure it out.",
        "deployedLink": "https://g-list-cb.herokuapp.com/",
        "repoLink": "https://github.com/CB721/grocery-list-front",
        "secondRepoLink": "https://github.com/CB721/grocery-list-back",
        "type": [
            "Full Stack"
        ]
    },
    {
        "name": "Clef Co",
        "teamSize": 1,
        "technologies": [
            "React.js",
            "Node.js",
            "MySQL",
            "JavaScript",
            "HTML/CSS",
            "Local/Session Storage",
            "Express.js",
            "Passport.js",
            "Material-UI",
            "React Bootstrap",
            "Moment.js",
            "React-textfit",
            "React-reveal",
            "React-toastify",
            "Glamor CSS",
            "React-player",
            "React-star-ratings"
        ],
        "publishedDate": "Dec 2019",
        "mainImage": "https://github.com/CB721/clef-co/blob/master/Walkthrough/clef-co-walkthrough1.gif?raw=true",
        "secondaryImage": "https://github.com/CB721/clef-co/blob/master/Assets/table-relations.png?raw=true",
        "tertiaryImage": "",
        "description": "Clef Co is a mock E-commerce application based on musical instruments, audio equipment and recording software.",
        "mainDetails": "There is a home page where the user is greeted with the company name over a video background.  As they scroll down, they are presented with top selling products, reviews from other users and, if they are logged in, the last three products they viewed.  On the products page, the user is shown the most recently added product, a collection of product bundles and links to contact support, view tutorials and view their cart.  On the shop page, the user can view all products, filter by a variety of categories and add items to their cart.  The tutorials page, the user is presented with a list of videos embedded on the page.  On the contact page, the user can submit support tickets for items they have purchased.  On the search page, the user can search for products, previously submitted contact forms and orders.  Each product has it's own page where the user can view more details on that product, add it to their cart and view/leave reviews.",
        "secondaryDetails": "Because every schema on this application relates to at least one other table, I used SQL. In order to avoid any future security risks from using an ORM tool like Sequelize, I wrote out my SQL queries. Also, because I was writing complex queries, I was able to test them out in MySQL Workbench without having the server running.",
        "tertiaryDetails": "On the profile page, the user is presented with their personal information and can update it.  They are also shown a news feed which is populated with information about previous orders, reviews and a monthly message from the company.  The user is shown their current status based on how long they have had an account.  After this, the user can view all of their past orders in more detail.  On the bottom of the page, the user is presented with an option to delete their account.  On the cart page, the user can delete items from their cart, change the quantities and view the total cost including shipping.  They will then be prompted for their address and credit card information.  Finally, they can view all of the details and checkout.",
        "responsibilities": [
            "Creating the the inital wireframes and mockups",
            "Setting up the API",
            "Setting up user authentication"
        ],
        "userStories": [
            "As a customer, I want to browse a site and find all kinds of instruments, music gear and tech.",
            "As a customer, I want to order products and browse my previous orders.",
            "As a customer, I want to easily access tutorials and contact support for products I previously ordered.",
            "As a business, I need to sell our products online.",
            "As a business, I need to keep track of data on our users.",
            "As a business, I need to keep track of data about our products."
        ],
        "challenge": "Prior to this project, all of my experience creating components in React was doing so using Class Components.  For this project, I challenged myself to learn to use Functional Components using Hooks.  I particulariy struggled with the useEffect hook and how to prevent a component from constantly refresing.",
        "deployedLink": "https://virtual-store-react.herokuapp.com/",
        "repoLink": "https://github.com/CB721/clef-co",
        "secondRepoLink": "",
        "type": [
            "Full Stack"
        ]
    },
    {
        "name": "JCARD Brewery Solutions",
        "teamSize": 5,
        "technologies": [
            "JavaScript",
            "Node.js",
            "React.js",
            "Redux",
            "Express.js",
            "Passport.js",
            "Bcrypt.js",
            "React-Chartjs-2",
            "Moment.js",
            "MongoDB",
            "Material-UI",
            "HTML/CSS"
        ],
        "publishedDate": "Sep 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/final-project-walkthrough.gif?raw=true",
        "secondaryImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/crm-routing.png?raw=true",
        "tertiaryImage": "",
        "description": "A mock CRM application focused on data analytics and sales team tools.",
        "mainDetails": "This was a very large application to complete in only a few weeks. We were successful because, early on, we divided up the responsibilities so everyone was aware of what they needed to do.",
        "secondaryDetails": "Once I had all of the schemas connected to each other, I then needed to generate analytics. I focused on sales analytics as that is the most important thing for a business. Through this process, I learned about the power of aggregate functions in MongoDB. Because a business may want to view  different time sets of data, I wanted to create as much flexibility as I could. In order to generate date ranges, I used Moment.js.",
        "tertiaryDetails": "The user also can view a pie chart with all of the products based on quantity sold. By  clicking on the name of them, they can simulate what sales would be like without that particular product. The user can search for an employee by name and get individual statistics.",
        "responsibilities": [
            "Creating the schemas",
            "Setting up the API endpoints",
            "Creating and displaying analytics",
            "Manager task assignment and analytics components"
        ],
        "userStories": [
            "As a business, I want an application to manage all of my products.",
            "As a business, I want to assign tasks to my employees",
            "As a business, I want to easily visualize my sales data."
        ],
        "challenge": "Prior to this project, I had very little experience using MongoDB. My main challenge was getting all of the schemas connected to each other. This was accomplished using populate and aggregate functions.",
        "deployedLink": "https://shielded-retreat-69523.herokuapp.com/",
        "repoLink": "https://github.com/DaneShrewsbury2288/CRM",
        "secondRepoLink": "",
        "type": [
            "Full Stack",
            "Data Analytics"
        ]
    },
    {
        "name": "Galaxy Horizons",
        "teamSize": 3,
        "technologies": [
            "JavaScript",
            "Node.js",
            "Unity",
            "C#",
            "Express.js",
            "Passport.js",
            "Bcrypt.js",
            "MySQL",
            "HTML/CSS"
        ],
        "publishedDate": "Jul 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/galaxyhorizons.png?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "A custom racing game application.",
        "mainDetails": "Our team wanted to take on the challenge of creating a video game. Before this project, I had never attempted to make a video game before. When we started off, we wanted to use the PlayCanvas game engine because it was writen in JavaScript. However, we soon discovered that the documentation was outdated.",
        "secondaryDetails": "We then had to had to pivot to using the Unity game engine which used C#. I did not have experience using C# prior, so, as the game developer, I had to quickly learn enough to create the game logic.",
        "tertiaryDetails": "",
        "responsibilities": [
            "Creating the game logic",
            "Design game UI/UX",
            "Assisting with user authentication"
        ],
        "userStories": [
            "As a user, I want to play a visually-pleasing and exciting racing game.",
            "As a user, when I play the game, I want to keep track of my time."
        ],
        "challenge": "My biggest challenge in this project was taking on a leadership role. Normally, I am more comfortable in taking instructions instead of making them. The most important lesson I took from this experience was that everyone has different strengths and that a good leader supports those strengths as opposed to focusing on weaknesses.",
        "deployedLink": "https://guarded-retreat-41889.herokuapp.com",
        "repoLink": "https://github.com/CB721/project-altavista",
        "secondRepoLink": "https://github.com/CB721/galaxy-horizons",
        "type": [
            "Back End",
            "Game"
        ]
    },
    {
        "name": "Google Books Search",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "React.js",
            "Node.js",
            "Express.js",
            "MongoDB",
            "HTML/CSS"
        ],
        "publishedDate": "Aug 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/google-books3.gif?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "An application for discovering and searching for new books.",
        "mainDetails": "When the user first views the page, they are presented with a carousel of current New York  Times best-sellers. They also have the option to search for books, save these books and to view ones that have been saved.",
        "secondaryDetails": "My goal when I approached this project was to create a simple, but powerful full-stack application. I added extra user-enhancements by creating a custom video background and providing word suggestions when the user begins to search for a new book.",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I want to find new books based off of what I search for.",
            "As a user, I want to save books to reference later.",
            "As a user, I want to get a link to purchase a book of my choosing."
        ],
        "challenge": "",
        "deployedLink": "https://google-books-search-cb.herokuapp.com",
        "repoLink": "https://github.com/CB721/google-books-search",
        "secondRepoLink": "",
        "type": [
            "Full Stack"
        ]
    },
    {
        "name": "Mario Memory",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "React.js",
            "HTML/CSS"
        ],
        "publishedDate": "Aug 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/mario-memory.gif?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "A memory game featuring Nintendo characters.",
        "mainDetails": "The player selects a character to start. They have to keep selecting characters until they run out of characters. Every unique character they get, adds to their score. Once the game ends, if their score is higher than the high score, their score becomes the new high score.",
        "secondaryDetails": "This app was my first experience working with React. I started by creating all the components and setting up the static page. After that, I added all the logic for displaying the characters and updating the score.",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I want to test my memory by playing a simple game."
        ],
        "challenge": "As this was my first project in React, using state and passing props was a new concept.  Learning how to the parent-child relationship between components works was difficult to wrap my head around.",
        "deployedLink": "https://mario-memory.herokuapp.com",
        "repoLink": "https://github.com/CB721/Clicky-Game",
        "secondRepoLink": "",
        "type": [
            "Front End"
        ]
    },
    {
        "name": "Bamazon",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "Node.js",
            "MySQL"
        ],
        "publishedDate": "Jun 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/Bamazon-App-Walkthrough.gif?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "A CLI app where the user can view and purchase products. The app will take in the order and remove the stock from the inventory.",
        "mainDetails": "This app was my first experience working with SQL. Writing commands in SQL felt a lot more like writing in English compared to my experience writing in JavaScript.",
        "secondaryDetails": "",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I want to add items to my cart and place an order."
        ],
        "challenge": "A challenging part of this project was passing the data along as the customer progresses through the stages of the app. Even though this app was through the command line, I wanted to make it as close to a modern-day e-commerce experience as possible. The main way I wanted to achieve this was creating a shopping cart for the user to add to.",
        "deployedLink": "",
        "repoLink": "https://github.com/CB721/bamazon",
        "secondRepoLink": "",
        "type": [
            "Back End"
        ]
    },
    {
        "name": "Node Adventure Game",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "Node.js",
            "Jest",
            "Inquirer",
            "Figlet",
            "Colors"
        ],
        "publishedDate": "Jan 2020",
        "mainImage": "https://github.com/CB721/node-adventure-game/blob/master/assets/adventure-walkthrough.gif?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "A CLI adventure game application where you can select a character, battle enemies and play side missions.",
        "mainDetails": "My main goal for this project was to create a code base that was a modular as possible.  Any time I found myself copy pasting a section ofcode, I separated it into its own function.",
        "secondaryDetails": "",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I want to play a game that progressively gets more difficult.",
            "As a user, I want to save my progress I go through the game."
        ],
        "challenge": "Configuring tests to run.  My previous experience with tests had only been on a couple of basic functions.  Using Jest, I was able to run tests on minor details like what was console logged and that a function return a valid value.",
        "deployedLink": "",
        "repoLink": "https://github.com/CB721/node-adventure-game",
        "secondRepoLink": "",
        "type": [
            "Back End"
        ]
    },
    {
        "name": "LIRI",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "Node.js",
            "Firebase DB"
        ],
        "publishedDate": "Jun 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/liri-images/liri.gif?raw=true",
        "secondaryImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/liri-images/spotify-this-song.png?raw=true",
        "tertiaryImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/assets/images/liri-images/concert-this.png?raw=true",
        "description": "LIRI (Language Interpretation and Recognition Interface) is a CLI app that will search Spotify's API for songs, Bands In Town's API for concerts and OMDB's API for movies.",
        "mainDetails": "This was my first project in Node. Working solely in the command line was different at first but, in the end, I found it more efficient for testing in comparison to using the console log on a browser.",
        "secondaryDetails": "I challenged myself in this project to implement an error log of all invalid searches. To achieve this, I created a Firebase database and had every search logged there.",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I have so many different apps for finding entertainment. It would be great to have one place I could look for it all."
        ],
        "challenge": "One issue I ran into a couple of times while working on this project was referencing the results from the APIs. In particular, getting the Rotten Tomatoes rating from OMDB was troublesome. I kept getting [object Object] when I referenced it as response.data.Ratings.value. Eventually, I found that I needed to go to the second index in Ratings and get that value.",
        "deployedLink": "",
        "repoLink": "https://github.com/CB721/liri-node-app",
        "secondRepoLink": "",
        "type": [
            "Back End"
        ]
    },
    {
        "name": "Hiker",
        "teamSize": 4,
        "technologies": [
            "JavaScript",
            "jQuery",
            "HTML/CSS"
        ],
        "publishedDate": "May 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/hikerApp.png?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "An application for outdoor enthusiasts and the casual hiker to locate nearby trails.",
        "mainDetails": "This app allows users to see some of the most beautiful hiking trails across North America. Users can see what hikes are nearby, how to get to them, and what to expect once they get there.",
        "secondaryDetails": "Building this app was my first experience working on a team to create an application. It taught me the importance of communication, teamwork and patience.",
        "tertiaryDetails": "",
        "responsibilities": [
            "Configuring Google's Geolocation API",
            "Set up Axios in jQuery",
            "Assisting with UX/UI design"
        ],
        "userStories": [
            "As a user, I want to go on a hike, but I only want to travel a certain distance there and back. That requires a lot of research, and there aren't any easy-to-use resourses online."
        ],
        "challenge": "Collaborating on a team using GitHub for version control was a new experience for me.  Since I was working mostly on API calls, I didn't reference the front end too often.  When my team I went to merge, we ran into a lot of conflicts.  My main takeaway was to commit and pull often.",
        "deployedLink": "https://cb721.github.io/Project-Batman/",
        "repoLink": "https://github.com/CB721/Project-Batman",
        "secondRepoLink": "",
        "type": [
            "Full Stack"
        ]
    },
    {
        "name": "Train Scheduler",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "jQuery",
            "HTML/CSS",
            "Firebase DB"
        ],
        "publishedDate": "May 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/trainScheduler.png?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "An application that provides up-to-date information about trains.",
        "mainDetails": "The user can input information about any train they like with how often it runs.  This information is then stored in Firebase and then displayed to the user.",
        "secondaryDetails": "",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I travel often and use public transportation on these trips. It would be great to save that information in one location for me to reference."
        ],
        "challenge": "Building this application was my first experience using Firebase. Sending the user inputs to Firebase and then displaying them back on the HTML was challenging. I was getting values and seeing them in Firebase, but when I referenced them to put back on the HTML, they would only show up when the user initally clicks the submit button. After troubleshooting for multiple days, I realized I was not referencing the snapshot value when calling the variables.",
        "deployedLink": "https://cb721.github.io/Train-Scheduler/",
        "repoLink": "https://github.com/CB721/Train-Scheduler",
        "secondRepoLink": "",
        "type": [
            "Full Stack"
        ]
    },
    {
        "name": "Basketball Trivia",
        "teamSize": 1,
        "technologies": [
            "JavaScript",
            "jQuery",
            "HTML/CSS"
        ],
        "publishedDate": "Apr 2019",
        "mainImage": "https://github.com/CB721/ClintBrodarPortfolio/blob/master/src/assets/images/trivia.png?raw=true",
        "secondaryImage": "",
        "tertiaryImage": "",
        "description": "A multipe-choice guessing game about basketball.",
        "mainDetails": "Once the user clicks the 'Jump Ball' button, they are presented with a list of questions. They then have 24 seconds to answer all of them and hit the 'Slam Dunk' button. Either when the user hits the 'Slam Dunk' button, or the timer runs out, they are presented with their results.",
        "secondaryDetails": "This project taught me about using timing functions in Javascript. I learned how manipulate the DOM using jQuery and dynamically change elements. Prevously, I would have created a new HTML document for each stage of the game.",
        "tertiaryDetails": "",
        "responsibilities": [],
        "userStories": [
            "As a user, I want a game for my kids to play to learn about basketball. These days, they only know about current players and I want them to understand more about the history of the game"
        ],
        "challenge": "A major obstacle I faced in this project was the styling. No matter what background or text color I used, the questions and answers blended in to the background. I decided to create a background for the entire div element of the questions and results. This helped separate it from the background.",
        "deployedLink": "https://cb721.github.io/Basketball-Trivia/",
        "repoLink": "https://github.com/CB721/Basketball-Trivia",
        "secondRepoLink": "https://github.com/CB721/TriviaGame",
        "type": [
            "Front End"
        ]
    }
]